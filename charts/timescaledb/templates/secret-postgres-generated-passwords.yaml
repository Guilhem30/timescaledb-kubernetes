# This file and its contents are licensed under the Apache License 2.0.
# Please see the included NOTICE for copyright information and LICENSE for a copy of the license.
{{- /*
The purpose of this Secret is to have random passwords set for every
user mentioned in the spec.users section, in order for every installation to
be able to run to completion, as well as to generate secrets for

For production installs, it is recommended to not refer to these secrets, but
to generate your own secrets and refer to those in:
  spec.users.$username.password.valueFrom.secretKeyRef
*/ -}}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-generated
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-delete-policy": "before-hook-creation"
data:
{{- $globalRoles := default .Values.spec.users dict -}}
{{- $defaultRoles := dict "postgres" dict "standby" dict -}}
{{- /*
The postgres and standby users are part of the replication setups of the individual TimescaleDB
nodes. We do not want to allow these users to have to use the same credentials for all nodes,
therefore we outright ban them from being used as global users.
*/ -}}
{{- range $roleName := $defaultRoles | keys }}
  {{- if hasKey $globalRoles $roleName }}
    {{ fail (printf "The following username is not allowed as a global user: %s" ($roleName | quote)) }}
  {{- end }}
{{- end }}

{{- range $key, $val := $globalRoles }}
{{- $role := (default $val dict) }}
{{- $password := get $role "password" | default dict }}
{{- if hasKey $password "value" }}
  {{ $key | quote }}: {{ get $password "value" | b64enc | quote }}
{{- else }}
  {{ $key | quote }}: {{ randAlphaNum 30 | b64enc | quote }}
{{- end }}
{{- end }}

{{- /*
This is where we generate/reuse the password specified for individual nodes.
We now actually *need* a password for postgres and standby, and therefore
add these users if they do not yet exist
*/ -}}
{{- range $node, $val := .Values.spec.nodes }}
{{- $roles := $defaultRoles | merge (get $val "users" | default dict) -}}
{{- range $key, $val := $roles }}
{{- $role := (default $val dict) }}
{{- $password := get $role "password" | default dict }}
{{- if hasKey $password "value" }}
  {{ printf "%s.%s" $node $key | quote }}: {{ get $password "value" | b64enc | quote }}
{{- else }}
  {{ printf "%s.%s" $node $key | quote }}: {{ randAlphaNum 30 | b64enc | quote }}
{{- end }}
{{- end }}
{{- end }}
...
